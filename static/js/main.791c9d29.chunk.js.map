{"version":3,"sources":["serviceWorkerRegistration.js","components/Card.js","components/Cardlist.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/Header.js","constants.js","containers/App.js","actions.js","reportWebVitals.js","reducers.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Card","props","name","email","id","className","alt","src","CardList","robots","cardComponent","map","user","i","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundry","hasError","info","this","setState","Component","Header","nextProps","nextState","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","onRequestRobots","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","response","json","data","err","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateSearch","initialStateRobots","rootReducer","createLogger","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.791c9d29.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'tachyons';\r\n\r\nfunction Card(props){\r\n\tconst {name,email,id} = props;\r\n\treturn(\r\n\t\t<div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n\t\t\t<img alt=\"robot\" src={`https://robohash.org/${id}?200x200`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\r\n\t\t);\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nfunction CardList({robots}){\r\n\tconst cardComponent = robots.map((user,i) => {\r\n\t\treturn <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} />\r\n\t})\r\n\treturn(\r\n\t\t<div>\r\n\t\t    {cardComponent}\r\n\t\t</div>\r\n\t\t);\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nfunction SearchBox({searchField,searchChange}){\r\n\treturn(\r\n\t\t<div className=\"pa2\">\r\n\t\t\t<input\r\n\t\t\tclassName=\"pa3 ba b--green bg-lightest-blue\" \r\n\t\t\ttype=\"search\" \r\n\t\t\tplaceholder=\"Search robots\"\r\n\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t\t);\r\n}\r\nexport default SearchBox;","\r\nfunction Scroll(props){\r\n\r\n\treturn (\r\n\t\t<div style={{overflowY:'scroll',border:'4px solid black',height:'800px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t\t);\r\n\t\t\r\n}\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component{\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\tcomponentDidCatch(error,info){\r\n\t\tthis.setState({hasError:true});\r\n\t}\r\n\trender(){\r\n\t\tif(this.state.hasError){\r\n\t\t\treturn <h1>Oooops. Page is broken :(</h1>\r\n\t\t}\r\n\t\telse\r\n\t\t\treturn this.props.children;\r\n\t}\r\n}\r\nexport default ErrorBoundry;","import React, { Component } from \"react\";\r\n\r\nclass Header extends Component {\r\n    shouldComponentUpdate(nextProps, nextState){\r\n        return false;\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <h1 className=\"f1\">RoboFriends</h1>\r\n            </div>\r\n        \r\n        )\r\n    }\r\n}\r\nexport default Header;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAIL';","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/Cardlist';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport Header from '../components/Header';\r\nimport './App.css';\r\n\r\nimport {requestRobots, setSearchField} from '../actions';\r\n\r\nconst mapStateToProps = state =>{\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots:state.requestRobots.robots,\r\n    isPending:state.requestRobots.isPending,\r\n    error: state.requestRobots.error\r\n  }\r\n}\r\nconst mapDispatchToProps = (dispatch) =>{\r\n  return {\r\n    onSearchChange: (event) =>dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  }\r\n}\r\n\r\n\r\nclass App extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      robots:[]\r\n    }\r\n  }\r\n  componentDidMount(){\r\n    this.props.onRequestRobots();\r\n  }\r\n  \r\n  render(){\r\n    const {searchField, onSearchChange, robots, isPending} = this.props;\r\n    const filteredRobots = robots.filter(robot =>{\r\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n    })\r\n\r\n    return !isPending ? <h1>Loading</h1> : (\r\n      <div className=\"tc\">\r\n        <Header />\r\n        <SearchBox searchChange={onSearchChange}/>\r\n        <Scroll>\r\n          <ErrorBoundry>\r\n            <CardList robots={filteredRobots} />\r\n          </ErrorBoundry>\r\n        </Scroll>\r\n      </div>\r\n      );\r\n  }\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from \"./constants.js\"\r\n\r\nexport const setSearchField = (text) => ({\r\n    type:CHANGE_SEARCH_FIELD,\r\n    payload:text\r\n})\r\nexport const requestRobots = () => (dispatch) =>{\r\n    dispatch({ type:REQUEST_ROBOTS_PENDING});\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response => response.json())\r\n    .then(data => dispatch({type:REQUEST_ROBOTS_SUCCESS, payload:data}))\r\n    .catch(err => dispatch({type:REQUEST_ROBOTS_FAILED, payload:err}))\r\n}","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import { \r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from \"./constants.js\"\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch,action={}) =>{\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            //can use {...state,searchField: action.payload}\r\n        return Object.assign({}, state, {searchField: action.payload});\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialStateRobots = {\r\n    isPending:false,\r\n    robots:[],\r\n    error:''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots,action={}) =>{\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({},state,{isPending:true});\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({},state,{robots:action.payload,isPending:true});\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({},state,{error:action.payload});\r\n        default:\r\n            return state;\r\n\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport {Provider} from 'react-redux';\r\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport { searchRobots,requestRobots } from './reducers';\r\nimport 'tachyons';\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({searchRobots,requestRobots})\r\nconst store = createStore(rootReducer,applyMiddleware(thunkMiddleware));\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\nserviceWorkerRegistration.register();\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}